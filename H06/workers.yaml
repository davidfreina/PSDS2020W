---
name: "workers"
dataIns:
  - name: "N"
    type: "number"
    source: "N"
  - name: "f"
    type: "number"
    source: "f"
workflowBody:
  - function:
      name: "workers"
      type: "workersType"
      dataIns:
        - name: "N"
          type: "numbers"
          source: "workers/N"
        - name: "f"
          type: "numbers"
          source: "workers/f"
      dataOuts:
        - name: "arrays"
          type: "collection"
      properties:
        - name: "resource"
          value: "python:arn:aws:lambda:us-east-1:722672042190:function:workers"
  - parallelFor:
      name: "LambdaFunction128MBParallel"
      loopCounter:
        name: "counter"
        type: "number"
        from: "0"
        to: "workers/f"
        step: "1"
      dataIns:
        - name: "arrays"
          type: "collection"
          source: "workers/arrays"
          constraints:
            - name: "distribution"
              value: "BLOCK(1)"
      loopBody:
        - function:
            name: "LambdaFunction128MB"
            type: "LambdaFunction128MBtype"
            dataIns:
              - name: "input"
                type: "collection"
                source: "LambdaFunction128MBParallel/arrays"
            properties:
              - name: "resource"
                value: "java:arn:aws:lambda:us-east-1:722672042190:function:LambdaFibonacci128MB"
            dataOuts:
              - name: "output"
                type: "collection"
      dataOuts:
        - name: "output"
          type: "collection"
          source: "LambdaFunction128MB/output"
          constraints:
            - name: "aggregation"
              value: "+"
dataOuts:
  - name: "result"
    type: "collection"
    source: "LambdaFunction128MBParallel/output"